stages:          # List of stages for jobs, and their order of execution
  # - sonar-checks
  - deploy



# The Docker image that will be used to build your app
image: node:latest
# Functions that should be executed before the build script is run

cache:
  paths:
    - node_modules/

before_script:
  - whoami
  - npm install
  - pwd
  - echo ${PATH}
  - which npm
  - ls -lh $(which npm)




# sonar-checks:
#   stage: sonar-checks
#   image: sonarsource/sonar-scanner-cli:latest
#   script:
#     - npm install
#     - sonar-scanner
#       -Dsonar.gitlab.max_major_issues_gate=0
#       -Dsonar.verbose=true
#       -Dsonar.c.file.suffixes=-
#       -Dsonar.cpp.file.suffixes=-
#       -Dsonar.objc.file.suffixes=-
#       -Dsonar.projectKey=bpsafrica_live-coding-assessment
#       -Dsonar.organization=bpsafrica
#       -Dsonar.host.url=https://sonarcloud.io
#       -Dsonar.token=f8f2ba76ed1d9ee742362d7ee42a2ae4d5d727ea
#       # -Dsonar.inclusions=**/*.md,**/*.json,**/*.html,**/*.css,**/*.js,**/*.ts
#       # -Dsonar.exclusions=**/Migrations/*.cs
#       # -Dsonar.qualitygate.wait=true
#       # -Dsonar.exclusions=**/*.java
#   allow_failure: false  # Allow the pipeline to continue even if SonarCloud analysis fails
#   only:
#     - merge_requests
#     - main
#     - feature/*
#   dependencies:
#     - "sast"

pages:
  stage: deploy
  script:
    - npm install
    - npm run build

    - echo "Checking. .. "
    
    - pwd
    - ls -lha ${PATH}
    - ls -lha $(pwd)
    - ls -lha /public/

    - echo "Checking. .. "

    - rm -rf public
    - cp build/index.html build/404.html
    - mv build public
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  # dependencies:
  #   # - "sonar-checks"
  #   # - "sast"
